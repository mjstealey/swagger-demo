<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Swagger Demo</title>
    <link>https://mjstealey.github.io/swagger-demo/</link>
    <description>Recent content in Home on Swagger Demo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 May 2017 14:04:36 -0400</lastBuildDate>
    
	<atom:link href="https://mjstealey.github.io/swagger-demo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Client</title>
      <link>https://mjstealey.github.io/swagger-demo/pythonclient/</link>
      <pubDate>Thu, 01 Jun 2017 16:14:11 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/pythonclient/</guid>
      <description>Using the generated python-client code from swagger, we ran the code as suggested in the accompanied documentation.
$ cd /PATH/TO/python-client-generated $ virtualenv -p /usr/local/bin/python3 venv3 Running virtualenv with interpreter /usr/local/bin/python3 Using base prefix &#39;/usr/local/Cellar/python3/3.6.0_1/Frameworks/Python.framework/Versions/3.6&#39; New python executable in /Users/stealey/Github/irods/swagger-demo/python-client-generated/venv3/bin/python3.6 Also creating executable in /Users/stealey/Github/irods/swagger-demo/python-client-generated/venv3/bin/python Installing setuptools, pip, wheel...done. $ source venv3/bin/activate stealey at dhcp152-54-9-79 in ~/Github/irods/swagger-demo/python-client-generated (master●●) (venv3)$ pip install -r requirements.txt Collecting certifi&amp;gt;=14.05.14 (from -r requirements.txt (line 1)) Using cached certifi-2017.</description>
    </item>
    
    <item>
      <title>Python-Flask Server</title>
      <link>https://mjstealey.github.io/swagger-demo/pythonserver/</link>
      <pubDate>Thu, 01 Jun 2017 15:50:42 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/pythonserver/</guid>
      <description>Using the generated stub code from swagger, we ran the code as suggested in the accompanied documentation.
$ cd /PATH/TO/python-flask-server-generated $ virtualenv -p /usr/local/bin/python3 venv3 Running virtualenv with interpreter /usr/local/bin/python3 Using base prefix &#39;/usr/local/Cellar/python3/3.6.0_1/Frameworks/Python.framework/Versions/3.6&#39; New python executable in /Users/stealey/Github/irods/swagger-demo/python-flask-server-generated/venv3/bin/python3.6 Also creating executable in /Users/stealey/Github/irods/swagger-demo/python-flask-server-generated/venv3/bin/python Installing setuptools, pip, wheel...done. $ source venv3/bin/activate (venv3)$ pip install -U connexion Collecting connexion Downloading connexion-1.1.10-py3-none-any.whl (1.0MB) 100% |████████████████████████████████| 1.0MB 982kB/s Collecting flask&amp;gt;=0.10.1 (from connexion) Downloading Flask-0.</description>
    </item>
    
    <item>
      <title>Swagger YAML file</title>
      <link>https://mjstealey.github.io/swagger-demo/swaggeryaml/</link>
      <pubDate>Thu, 01 Jun 2017 15:14:39 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/swaggeryaml/</guid>
      <description>Environmental Exposures API Swagger specification
# Data Translator Environmental Exposure API # # This API provides access to environmental exposures. An exposure is # any factor outside a human body that can act upon the body to cause # a health impact, including chemical entities, biological entities, # physical factors (e.g., sunlight, temperature), and social environmental # factors (e.g., crime-induced stress, poverty). # # Exposures are parameterized by a range of temporal and spatial # factors that determine where a human has been and thus what factors they # were exposured to.</description>
    </item>
    
    <item>
      <title>6. Exposures API</title>
      <link>https://mjstealey.github.io/swagger-demo/exposures/</link>
      <pubDate>Wed, 31 May 2017 19:52:22 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/exposures/</guid>
      <description>Short walkthrough example of how the Exposures API was implemented using swagger tools in Python.
Specification in Swagger At the start we had a notion of the data we wanted to serve, a list of sources to get it from, and a good idea of what this data looked like with some example datasets in a PostgreSQL / PostGIS database. Based on this information a specification file was started prior to the existence of any ReSTful service provider, so going down the rabbit hole of the swagger eco-system seemed a sensible thing to do.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://mjstealey.github.io/swagger-demo/references/</link>
      <pubDate>Wed, 31 May 2017 19:46:54 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/references/</guid>
      <description> Swagger: http://swagger.io Swaggerhub: https://app.swaggerhub.com/ Github swagger-api: https://github.com/swagger-api SmartAPI: http://smart-api.info/ Exposures-api: https://github.com/mjstealey/exposures-api Docker: https://www.docker.com Open API: https://github.com/OAI/OpenAPI-Specification  </description>
    </item>
    
    <item>
      <title>5. API Client</title>
      <link>https://mjstealey.github.io/swagger-demo/apiclient/</link>
      <pubDate>Wed, 31 May 2017 15:27:56 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/apiclient/</guid>
      <description>The swagger codegen project allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an OpenAPI Spec.
API clients:
 ActionScript, Apex, Bash, C# (.net 2.0, 4.0 or later), C++ (cpprest, Qt5, Tizen), Clojure, Dart, Elixir, Go, Groovy, Haskell, Java (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign), Kotlin, Node.js (ES5, ES6, AngularJS with Google Closure Compiler annotations) Objective-C, Perl, PHP, Python, Ruby, Scala, Swift (2.x, 3.x), Typescript (Angular1.</description>
    </item>
    
    <item>
      <title>4. API Server</title>
      <link>https://mjstealey.github.io/swagger-demo/apiserver/</link>
      <pubDate>Wed, 31 May 2017 15:27:47 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/apiserver/</guid>
      <description>Server generation is still strictly a developer task and swagger isn&amp;rsquo;t providing any particular magic here.
If you already have a server that delivers valid output in accordance with your swagger specification, then you&amp;rsquo;re done with this section and can move on.
If you&amp;rsquo;re starting from scratch and the swagger specification is the first step for your project, then swagger codegen may be of interest to you.
Swagger Codegen: Remove tedious plumbing and configuration by generating boilerplate server code in over 20 different languages</description>
    </item>
    
    <item>
      <title>3. API Specification</title>
      <link>https://mjstealey.github.io/swagger-demo/apispec/</link>
      <pubDate>Wed, 31 May 2017 15:27:39 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/apispec/</guid>
      <description>The OpenAPI Specification (fka The Swagger Specification) The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.</description>
    </item>
    
    <item>
      <title>2. Swagger vs SmartAPI</title>
      <link>https://mjstealey.github.io/swagger-demo/smartapi/</link>
      <pubDate>Wed, 31 May 2017 15:27:25 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/smartapi/</guid>
      <description>What is a smartAPI? The smartAPI project aims to maximize the FAIRness (Findability, Accessibility, Interoperability, and Reusability) of web-based Application Programming Interfaces (APIs). Rich metadata is essential to properly describe your API so that it becomes discoverable, connected, and reusable. We have developed a openAPI-based specification for defining the key API metadata elements and value sets. smartAPIs leverage the Hydra Web API specification and JSON-LD for providing semantically annotated JSON content that can be treated as Linked Data.</description>
    </item>
    
    <item>
      <title>1. What is Swagger?</title>
      <link>https://mjstealey.github.io/swagger-demo/swagger/</link>
      <pubDate>Wed, 31 May 2017 15:27:15 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/swagger/</guid>
      <description>Swagger allows you to describe the structure of your APIs so that machines can read them.
The ability of APIs to describe their own structure is the root of all awesomeness in Swagger. Why is it so great? Well, by reading your API’s structure, we can automatically build beautiful and interactive API documentation. We can also automatically generate client libraries for your API in many languages and explore other possibilities like automated testing.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://mjstealey.github.io/swagger-demo/_header/</link>
      <pubDate>Wed, 31 May 2017 14:03:12 -0400</pubDate>
      
      <guid>https://mjstealey.github.io/swagger-demo/_header/</guid>
      <description>Swagger Demo</description>
    </item>
    
  </channel>
</rss>